services:
  database:
    build:
      dockerfile: ./docker/database/Dockerfile
      context: ./
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - api-data:/var/lib/postgresql/data
    networks:
      - database-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${APP_DB_NAME} -U ${APP_DB_USER}" ]
      interval: 1m30s
      timeout: 10s
      retries: 5
      start_period: 30s
  server:
    image: ${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}:${TAG}
    env_file:
      - .env
    networks:
      - database-network
      - api-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
  proxy:
    image: caddy:latest
    env_file:
      - .env
    depends_on:
      - server
    restart: unless-stopped
    volumes:
      - caddy_data:/data
      - ./docker/caddy/Caddyfile:/etc/caddy/Caddyfile
    networks:
      - proxy
      - api-network
    ports:
      - 80:80
      - 443:443
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - monitoring
      - api-network
    restart: unless-stopped
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - proxy
      - monitoring
    restart: unless-stopped
volumes:
  api-data:
  caddy_data:
  grafana-data:
  prometheus-data:
networks:
  api-network:
  monitoring:
  database-network:
  proxy:
