// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/services/food.go
//
// Generated by this command:
//
//	mockgen -source=./src/services/food.go -destination=./src/services/mocks/food.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "gormCompose/src/models"
	response "gormCompose/src/response"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFood is a mock of Food interface.
type MockFood struct {
	ctrl     *gomock.Controller
	recorder *MockFoodMockRecorder
	isgomock struct{}
}

// MockFoodMockRecorder is the mock recorder for MockFood.
type MockFoodMockRecorder struct {
	mock *MockFood
}

// NewMockFood creates a new mock instance.
func NewMockFood(ctrl *gomock.Controller) *MockFood {
	mock := &MockFood{ctrl: ctrl}
	mock.recorder = &MockFoodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFood) EXPECT() *MockFoodMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFood) Create(food *models.Food) (*models.Food, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", food)
	ret0, _ := ret[0].(*models.Food)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFoodMockRecorder) Create(food any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFood)(nil).Create), food)
}

// Delete mocks base method.
func (m *MockFood) Delete(food *models.Food) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", food)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFoodMockRecorder) Delete(food any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFood)(nil).Delete), food)
}

// List mocks base method.
func (m *MockFood) List(pageInfo *response.Pagination) (*response.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", pageInfo)
	ret0, _ := ret[0].(*response.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFoodMockRecorder) List(pageInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFood)(nil).List), pageInfo)
}

// Update mocks base method.
func (m *MockFood) Update(food *models.Food) (*models.Food, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", food)
	ret0, _ := ret[0].(*models.Food)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFoodMockRecorder) Update(food any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFood)(nil).Update), food)
}
